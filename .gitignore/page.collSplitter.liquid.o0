{{ page.title }}      
{% if customer and customer.tags contains 'admin' %}

<div id="collSplitter_view">Loading...</div>
<button id="collSplitter_submit">Split selected</button><span> max collection size: </span><input id="collSplitter_max" type="number" value="5">

<script>

(function Shopify_CollectionSplitter() {'use strict';

  function dbgLog(msg) {if(collSplitter.debug) {console.log(msg);} return msg;}

  let collSplitter = {
      
    /*### CONFIG HERE ###*/
    
    APIuser: '0a1979f3449c0b9407b9720f340a2cc2',
    APIpw: '9254b73899d4c5f8e8ef80acad1c17a9',
    adminURL: location.origin + '/admin/',
    debug: true,
    
    view: document.getElementById('collSplitter_view'),
    submitB: document.getElementById('collSplitter_submit'),
    maxSize: document.getElementById('collSplitter_max'),
    pending: {},
  
    fetchJSON(url, post, panelAuth) {if(this.debug) {dbgLog('fetchJSON(' + url + ')' + (post ? (' post: ' + JSON.stringify(post)) : ''))}; return fetch(this.adminURL + url, {
      method: post ? 'POST' : 'GET',
      body: post ? JSON.stringify(post) : undefined,
      credentials: panelAuth ? 'include' : 'omit',
      headers: panelAuth ? this.headers_panel : this.headers
    }).then(function(res) {return res.json();});},
    
    getCollections() {
      let that = this;
      return this.fetchJSON('collections.json', null, true).then(function(res) {
        that.collections = res.collections;
        that.view.innerHTML = '';
        for(let i of that.collections) {that.view.appendChild(that.mkCollectionEl(i));}
      });
    },
    
    mkCollectionEl(coll) {
      let el = document.createElement('div'),
      chkB = el.appendChild(document.createElement('input')),
      delB = el.appendChild(document.createElement('button'));
      el.className = 'shopifyCollection';
      chkB.c_id = delB.c_id = coll.id;
      chkB.c_title = coll.title;
      chkB.type = 'checkbox';
      delB.innerText = 'delete';
      delB.c_type = coll.collection_type;
      chkB.addEventListener('change', this.chkB_change);
      delB.addEventListener('click', this.delB_click);
      for(let i of ['title', 'handle', 'id']) {el.appendChild(document.createElement('span')).innerHTML = '<b>' + i + ': </b><a href="' + this.adminURL + 'collections/' + coll.id + '" target="_blank">' +coll[i] + '</a>';}
      return el;
    },
    
    splitColl(collId) {
      dbgLog('splitColl(' + collId + ')');
      let maxSize = this.maxSize.value;
      return this.fetchJSON('collects.json?collection_id=' + collId).then(res => {
        let items = res.collects, subItems, t = 0, splits = [];
        while((subItems = items.splice(0, maxSize)).length !== 0) {t++; splits.push(this.mkCollectionFrom(collId, subItems.map(this.extractProduct), t));}
        return Promise.all(splits);
      });
    },
    
    extractProduct(item) {return {product_id: item.product_id};},
    
    mkCollectionFrom(collId, items, count) {dbgLog(items); return this.fetchJSON('custom_collections.json', {
      custom_collection: {
        title: this.pending['c_' + collId] + '-' + count,
        collects: items
      }
    });},
    
    deleteColl(id, type) {return fetch(this.adminURL + type + '_collections/' + id + '.json', {
      method: 'DELETE',
      credentials: 'omit',
      headers: this.headers
    }).then(() => collSplitter.getCollections());},
    
    delB_click(ev) {
      let tar = ev.target;
      if(!confirm('Are you sure you want to delete that collection?')) {return false;}
      tar.innerText = 'deleting...';
      collSplitter.deleteColl(tar.c_id, tar.c_type);
      return true;
    },
    
    chkB_change(ev) {collSplitter.updPending(ev.target);},
    
    updPending(chkB) {
      dbgLog('chkB_change');
      if(chkB.checked) {
        this.pending['c_' + chkB.c_id] = chkB.c_title;
        chkB.parentNode.style.borderColor = '#f00';
      } else {
        delete this.pending['c_' + chkB.c_id];
        chkB.parentNode.style.borderColor = '#222';
      }
      this.submitB.setAttribute('title', 'Split ' + Object.keys(this.pending).length + ' selected collections');
    },
    
    submitB_click(ev) {
      dbgLog('submitB_click');
      let tar = ev.target, splits = [];
      tar.disabled = true;
      tar.innerText = 'Splitting...';
      for(let i in collSplitter.pending) {splits.push(collSplitter.splitColl(i.slice(2)));}
      Promise.all(splits).then(function(ret) {
        dbgLog('done splitting: ' + ret);
        collSplitter.pending = {};
        collSplitter.getCollections();
        tar.innerText = 'Split selected';
        tar.disabled = false;
      });
    },
  
    init() {
      this.submitB.addEventListener('click', this.submitB_click);
      this.headers = {
        'Authorization': 'Basic ' + btoa(this.APIuser + ':' + this.APIpw),
        'Content-Type': 'application/json'
      };
      this.headers_panel = {'Content-Type': 'application/json'};
      this.getCollections();
      dbgLog('collSplitter.init()');
      return this;
    }
    
  };
  
  if(collSplitter.debug) {window.Shopify_collSplitter = collSplitter;}
  return collSplitter.init();
  //window.addEventListener('load', function() {return collSplitter.init();}); // Too slow. Why wait for Shopify to load?
  
})();

</script>

<style>

#collSplitter_view {width: 100%;}

#collSplitter_view > .shopifyCollection {
  display: flex;
  flex-direction: row;
  width: 100%;
  border: 2px solid #222;
  border-radius: 0.5rem;
}

#collSplitter_view > .shopifyCollection > * {margin: 0.5rem;}

#collSplitter_view > .shopifyCollection > span {
  flex: auto;
  text-align: center;
}

#collSplitter_max {width: 5rem;}

</style>

{% endif %}
{{ page.content }}
